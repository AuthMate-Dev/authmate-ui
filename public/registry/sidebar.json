{
  "name": "sidebar",
  "type": "components:ui",
  "dependencies": ["framer-motion", "lucide-react"],
  "files": [
    {
      "name": "sidebar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\n\ninterface SidebarProps {\n  children: React.ReactNode\n  className?: string\n  isOpen?: boolean\n  onToggle?: () => void\n  width?: string\n}\n\ninterface SidebarItemProps {\n  icon?: React.ComponentType<{ className?: string }>\n  label: string\n  href?: string\n  onClick?: () => void\n  isActive?: boolean\n  className?: string\n}\n\nconst Sidebar = ({ \n  children, \n  className, \n  isOpen = true, \n  onToggle,\n  width = \"16rem\" \n}: SidebarProps) => {\n  const sidebarVariants = {\n    open: { width, transition: { type: \"spring\", stiffness: 300, damping: 30 } },\n    closed: { width: \"4rem\", transition: { type: \"spring\", stiffness: 300, damping: 30 } }\n  }\n\n  return (\n    <motion.aside\n      initial={false}\n      animate={isOpen ? \"open\" : \"closed\"}\n      variants={sidebarVariants}\n      className={cn(\n        \"relative flex flex-col bg-background border-r border-border h-full overflow-hidden\",\n        className\n      )}\n    >\n      {onToggle && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onToggle}\n          className=\"absolute top-4 -right-3 z-10 h-6 w-6 rounded-full border bg-background shadow-md\"\n        >\n          {isOpen ? (\n            <ChevronLeft className=\"h-3 w-3\" />\n          ) : (\n            <ChevronRight className=\"h-3 w-3\" />\n          )}\n        </Button>\n      )}\n      {children}\n    </motion.aside>\n  )\n}\n\nconst SidebarHeader = ({ children, className }: { children: React.ReactNode; className?: string }) => (\n  <div className={cn(\"p-4 border-b border-border\", className)}>\n    {children}\n  </div>\n)\n\nconst SidebarContent = ({ children, className }: { children: React.ReactNode; className?: string }) => (\n  <div className={cn(\"flex-1 p-2 space-y-1\", className)}>\n    {children}\n  </div>\n)\n\nconst SidebarItem = ({ \n  icon: Icon, \n  label, \n  href, \n  onClick, \n  isActive, \n  className \n}: SidebarItemProps) => {\n  const content = (\n    <motion.div\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      className={cn(\n        \"flex items-center gap-3 px-3 py-2 rounded-lg cursor-pointer transition-colors\",\n        isActive \n          ? \"bg-primary text-primary-foreground\" \n          : \"hover:bg-accent hover:text-accent-foreground\",\n        className\n      )}\n      onClick={onClick}\n    >\n      {Icon && <Icon className=\"h-5 w-5 flex-shrink-0\" />}\n      <motion.span\n        initial={false}\n        animate={{ opacity: 1 }}\n        className=\"truncate\"\n      >\n        {label}\n      </motion.span>\n    </motion.div>\n  )\n\n  if (href) {\n    return <a href={href}>{content}</a>\n  }\n\n  return content\n}\n\nexport { Sidebar, SidebarHeader, SidebarContent, SidebarItem }"
    }
  ]
}

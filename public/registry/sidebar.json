{
    "$schema":  "https://ui.shadcn.com/schema/registry-item.json",
    "name":  "sidebar",
    "type":  "registry:ui",
    "dependencies":  [
                         "framer-motion",
                         "lucide-react"
                     ],
    "files":  [
                  {
                      "name":  "sidebar.tsx",
                      "content":  "\"use client\"\n\nimport * as React from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\n\ninterface SidebarProps {\n  children: React.ReactNode\n  className?: string\n  isOpen?: boolean\n  onToggle?: () =\u003e void\n  width?: string\n}\n\ninterface SidebarItemProps {\n  icon?: React.ComponentType\u003c{ className?: string }\u003e\n  label: string\n  href?: string\n  onClick?: () =\u003e void\n  isActive?: boolean\n  className?: string\n}\n\nconst Sidebar = ({ \n  children, \n  className, \n  isOpen = true, \n  onToggle,\n  width = \"16rem\" \n}: SidebarProps) =\u003e {\n  const sidebarVariants = {\n    open: { width, transition: { type: \"spring\", stiffness: 300, damping: 30 } },\n    closed: { width: \"4rem\", transition: { type: \"spring\", stiffness: 300, damping: 30 } }\n  }\n\n  return (\n    \u003cmotion.aside\n      initial={false}\n      animate={isOpen ? \"open\" : \"closed\"}\n      variants={sidebarVariants}\n      className={cn(\n        \"relative flex flex-col bg-background border-r border-border h-full overflow-hidden\",\n        className\n      )}\n    \u003e\n      {onToggle \u0026\u0026 (\n        \u003cButton\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onToggle}\n          className=\"absolute top-4 -right-3 z-10 h-6 w-6 rounded-full border bg-background shadow-md\"\n        \u003e\n          {isOpen ? (\n            \u003cChevronLeft className=\"h-3 w-3\" /\u003e\n          ) : (\n            \u003cChevronRight className=\"h-3 w-3\" /\u003e\n          )}\n        \u003c/Button\u003e\n      )}\n      {children}\n    \u003c/motion.aside\u003e\n  )\n}\n\nconst SidebarHeader = ({ children, className }: { children: React.ReactNode; className?: string }) =\u003e (\n  \u003cdiv className={cn(\"p-4 border-b border-border\", className)}\u003e\n    {children}\n  \u003c/div\u003e\n)\n\nconst SidebarContent = ({ children, className }: { children: React.ReactNode; className?: string }) =\u003e (\n  \u003cdiv className={cn(\"flex-1 p-2 space-y-1\", className)}\u003e\n    {children}\n  \u003c/div\u003e\n)\n\nconst SidebarItem = ({ \n  icon: Icon, \n  label, \n  href, \n  onClick, \n  isActive, \n  className \n}: SidebarItemProps) =\u003e {\n  const content = (\n    \u003cmotion.div\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      className={cn(\n        \"flex items-center gap-3 px-3 py-2 rounded-lg cursor-pointer transition-colors\",\n        isActive \n          ? \"bg-primary text-primary-foreground\" \n          : \"hover:bg-accent hover:text-accent-foreground\",\n        className\n      )}\n      onClick={onClick}\n    \u003e\n      {Icon \u0026\u0026 \u003cIcon className=\"h-5 w-5 flex-shrink-0\" /\u003e}\n      \u003cmotion.span\n        initial={false}\n        animate={{ opacity: 1 }}\n        className=\"truncate\"\n      \u003e\n        {label}\n      \u003c/motion.span\u003e\n    \u003c/motion.div\u003e\n  )\n\n  if (href) {\n    return \u003ca href={href}\u003e{content}\u003c/a\u003e\n  }\n\n  return content\n}\n\nexport { Sidebar, SidebarHeader, SidebarContent, SidebarItem }",
                      "type":  "registry:ui"
                  }
              ]
}

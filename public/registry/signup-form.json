{
  "name": "signup-form",
  "type": "components:auth",
  "dependencies": ["lucide-react", "react-hook-form", "@hookform/resolvers", "zod"],
  "registryDependencies": ["button", "input", "label", "card", "checkbox", "separator"],
  "files": [
    {
      "name": "signup-form.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport * as z from \"zod\"\nimport { Eye, EyeOff, Github, Mail, Loader2 } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\n\nconst signupSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n  agreeToTerms: z.boolean().refine(val => val === true, \"You must agree to the terms and conditions\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n})\n\ntype SignupFormData = z.infer<typeof signupSchema>\n\ninterface SignupFormProps {\n  onSubmit?: (data: SignupFormData) => void | Promise<void>\n  loading?: boolean\n  showSocial?: boolean\n  className?: string\n}\n\nexport function SignupForm({\n  onSubmit,\n  loading = false,\n  showSocial = true,\n  className\n}: SignupFormProps) {\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    setValue,\n    watch\n  } = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema)\n  })\n\n  const agreeToTerms = watch(\"agreeToTerms\")\n\n  const onSubmitForm = async (data: SignupFormData) => {\n    if (onSubmit) {\n      await onSubmit(data)\n    }\n  }\n\n  const isLoading = loading || isSubmitting\n\n  return (\n    <Card className={cn(\"w-full max-w-md mx-auto\", className)}>\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Create an account</CardTitle>\n        <CardDescription className=\"text-center\">\n          Enter your details below to create your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {showSocial && (\n          <>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button variant=\"outline\" disabled={isLoading}>\n                <Github className=\"mr-2 h-4 w-4\" />\n                GitHub\n              </Button>\n              <Button variant=\"outline\" disabled={isLoading}>\n                <Mail className=\"mr-2 h-4 w-4\" />\n                Google\n              </Button>\n            </div>\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n          </>\n        )}\n\n        <form onSubmit={handleSubmit(onSubmitForm)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First name</Label>\n              <Input\n                id=\"firstName\"\n                placeholder=\"John\"\n                disabled={isLoading}\n                {...register(\"firstName\")}\n              />\n              {errors.firstName && (\n                <p className=\"text-sm text-red-600\">{errors.firstName.message}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last name</Label>\n              <Input\n                id=\"lastName\"\n                placeholder=\"Doe\"\n                disabled={isLoading}\n                {...register(\"lastName\")}\n              />\n              {errors.lastName && (\n                <p className=\"text-sm text-red-600\">{errors.lastName.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"john@example.com\"\n              disabled={isLoading}\n              {...register(\"email\")}\n            />\n            {errors.email && (\n              <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Enter your password\"\n                disabled={isLoading}\n                {...register(\"password\")}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                disabled={isLoading}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.password && (\n              <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                placeholder=\"Confirm your password\"\n                disabled={isLoading}\n                {...register(\"confirmPassword\")}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                disabled={isLoading}\n              >\n                {showConfirmPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {errors.confirmPassword && (\n              <p className=\"text-sm text-red-600\">{errors.confirmPassword.message}</p>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"agreeToTerms\"\n              checked={agreeToTerms}\n              onCheckedChange={(checked) => setValue(\"agreeToTerms\", checked as boolean)}\n              disabled={isLoading}\n            />\n            <Label htmlFor=\"agreeToTerms\" className=\"text-sm font-normal\">\n              I agree to the{\" \"}\n              <a href=\"/terms\" className=\"underline underline-offset-4 hover:text-primary\">\n                Terms of Service\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"/privacy\" className=\"underline underline-offset-4 hover:text-primary\">\n                Privacy Policy\n              </a>\n            </Label>\n          </div>\n          {errors.agreeToTerms && (\n            <p className=\"text-sm text-red-600\">{errors.agreeToTerms.message}</p>\n          )}\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Create account\n          </Button>\n        </form>\n      </CardContent>\n      <CardFooter>\n        <p className=\"text-center text-sm text-muted-foreground w-full\">\n          Already have an account?{\" \"}\n          <a href=\"/login\" className=\"underline underline-offset-4 hover:text-primary\">\n            Sign in\n          </a>\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}"
    }
  ]
}
